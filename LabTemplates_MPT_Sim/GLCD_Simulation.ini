ASSIGN WIN <S1IN >S1OUT    /* Assign S1IN & S1OUT to the Serial window */
S1TIME = 0 ;
DEFINE int icase
icase = 1;
kill button *
DEFINE BUTTON "S7_0/1",    "S7_0_1 ()"
DEFINE BUTTON "S6_0/1",    "S6_0_1 ()"
DEFINE BUTTON "S5_0/1",    "S5_0_1 ()"
DEFINE BUTTON "S4_0/1",    "S4_0_1 ()"
DEFINE BUTTON "S3_0/1",    "S3_0_1 ()"
DEFINE BUTTON "S2_0/1",    "S2_0_1 ()"
DEFINE BUTTON "S1_0/1",    "S1_0_1 ()"
DEFINE BUTTON "S0_0/1",    "S0_0_1 ()"
DEFINE BUTTON "JST_Left",    "JST_Left ()"
DEFINE BUTTON "JST_Right",    "JST_Right ()"
DEFINE BUTTON "JST_Up",    "JST_Up ()"
DEFINE BUTTON "JST_Down",    "JST_Down ()"
DEFINE BUTTON "JST_Center",    "JST_Center ()"
DEFINE BUTTON "JST_Release",    "JST_Release ()"
DEFINE BUTTON "TA10_Push_Release",    "TA10_P_R ()"
DEFINE BUTTON "TA11_Push_Release",    "TA11_P_R ()"
DEFINE BUTTON "TA12_Push_Release",    "TA12_P_R ()"
DEFINE BUTTON "M_TA_1_Push_Rel",    "M_TA_1_P_R ()"
DEFINE BUTTON "M_TA_2_Push_Rel",    "M_TA_2_P_R ()"
DEFINE BUTTON "M_TA_3_Push_Rel",    "M_TA_3_P_R ()"
DEFINE BUTTON "M_TA_4_Push_Rel",    "M_TA_4_P_R ()"
DEFINE BUTTON "M_TA_5_Push_Rel",    "M_TA_5_P_R ()"
DEFINE BUTTON "M_TA_6_Push_Rel",    "M_TA_6_P_R ()"
DEFINE BUTTON "M_TA_7_Push_Rel",    "M_TA_7_P_R ()"
DEFINE BUTTON "M_TA_8_Push_Rel",    "M_TA_8_P_R ()"
DEFINE BUTTON "M_TA_9_Push_Rel",    "M_TA_9_P_R ()"
DEFINE BUTTON "Encoder_A",    "Enc_A ()"
DEFINE BUTTON "Encoder_B",    "Enc_B ()"
DEFINE BUTTON "Encoder_Push_Rel",    "Enc_P_R ()"
//DEFINE BUTTON "Graphic",    "Graphic ()"

//Ports Pin auf Null setzen
PORT0 = 0;
PORT1 = 0;
PORT2 = 0;
PORT3 = 0;
PORT4 = 0;

//Joystick Ports auf Null setzen
PORT0 &= ~(1<<3);
PORT0 &= ~(1<<21);
PORT0 &= ~(1<<25);
PORT0 &= ~(1<<27);
PORT0 &= ~(1<<28);

//Schalter Ports auf Null setzen
PORT1 &= ~(1UL << 18);
PORT1 &= ~(1UL << 19);
PORT1 &= ~(1UL << 20);
PORT1 &= ~(1UL << 21);
PORT1 &= ~(1UL << 22);
PORT1 &= ~(1UL << 23);
PORT1 &= ~(1UL << 24);
PORT1 &= ~(1UL << 25);
// Ports der Schalter TA10, TA11 und TA12 auf Null setzen
PORT1 &= ~(1UL << 26);
PORT1 &= ~(1UL << 27);
PORT2 &= ~(1UL << 11);
// 3x3 Matrix input ports auf Null setzen
//PORT0 &= ~(1UL << 4);
//PORT0 &= ~(1UL << 5);
//PORT3 &= ~(1UL << 26);
//Encoder Ports auf Null setzen
PORT0 &= ~(1<<23);
PORT0 &= ~(1<<24);
//PWM PORTS auf Null setzen
PORT2 &= ~(1UL << 0);
PORT2 &= ~(1UL << 1);
PORT2 &= ~(1UL << 2);
PORT2 &= ~(1UL << 3);
PORT2 &= ~(1UL << 4);
PORT2 &= ~(1UL << 5);
//Weitere PORTS auf Null setzen
PORT1 &= ~(1UL << 29);



FUNC int JST_Left () 
{
  if ((!(PINSEL1 & (3 << 18))) &&  !((PINMODE1 & ( 3 << 18))-( 2 << 18)) && !(FIO0DIR &(1UL<< 25))) //JST_Left
  {
	PORT0 |= (1<<25);
/*	if((IO0IntEnR&(1<<25) || (IO0IntEnF&(1<<25))
	{
	  PORT0 &= ~(1<<25);
	  PORT0 |= (1<<25);
	}*/
  }
  \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_JST_L++;
  if (\\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_JST_L ==2)
  {
    if (!(PINSEL1 & (3 << 10)) &&  !((PINMODE1 & ( 3 << 10))-( 2 << 10)) && !(FIO0DIR &(1UL<< 21))) PORT0  &=  ~(1<<21);
	  if (!(PINSEL1 & (3 << 22)) &&  !((PINMODE1 & ( 3 << 22))-( 2 << 22)) && !(FIO0DIR &(1UL<< 27))) PORT0  &=  ~(1<<27);
  	\\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_JST_L--;
   	\\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_JST_R = 0;
   	\\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_JST_U = 0;
   	\\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_JST_D = 0;
  }
  if (!(PINSEL1 & (3 << 24)) &&  !((PINMODE1 & ( 3 << 24))-( 2 << 24)) && !(FIO0DIR &(1UL<< 28))) //JST_Right
  {
	PORT0  &=  ~(1<<28);
  }
	return (0);
}

FUNC int JST_Right () 
{
  //if (!(PINSEL1 & (3 << 24)) &&  !((PINMODE1 & ( 3 << 24))-( 2 << 24)) && !(FIO0DIR &(1UL<< 28))) //JST_Right
	if (!(PINSEL1 & (3 << 24)) && !(FIO0DIR &(1UL<< 28))) //JST_Right
  {
	PORT0 |= (1<<28);
/*	if((IO0IntEnR&(1<<28)) || (IO0IntEnF&(1<<28)))
	{
	  PORT0 &= ~(1<<28);
	  PORT0 |= (1<<28);
    }*/
  }
   \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_JST_R++;
	if (\\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_JST_R ==2)
  {
    if (!(PINSEL1 & (3 << 10)) &&  !((PINMODE1 & ( 3 << 10))-( 2 << 10)) && !(FIO0DIR &(1UL<< 21))) PORT0  &=  ~(1<<21);
	if (!(PINSEL1 & (3 << 22)) &&  !((PINMODE1 & ( 3 << 22))-( 2 << 22)) && !(FIO0DIR &(1UL<< 27))) PORT0  &=  ~(1<<27);
	\\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_JST_R--;
 	\\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_JST_L = 0;
 	\\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_JST_U = 0;
 	\\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_JST_D = 0;
  }
  if (!(PINSEL1 & (3 << 18)) &&  !((PINMODE1 & ( 3 << 18))-( 2 << 18)) && !(FIO0DIR &(1UL<< 25))) //JST_Left
  {
	PORT0 &=  ~ (1<<25);
  }
	return (0);
}

FUNC int JST_Up () 
{
  if (!(PINSEL1 & (3 << 10)) &&  !((PINMODE1 & ( 3 << 10))-( 2 << 10)) && !(FIO0DIR &(1UL<< 21))) //JST_Up
  {
	PORT0 |= (1<<21);
  }
   \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_JST_U++;
	if (\\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_JST_U ==2)
  {
    if (!(PINSEL1 & (3 << 18)) &&  !((PINMODE1 & ( 3 << 18))-( 2 << 18)) && !(FIO0DIR &(1UL<< 25))) PORT0  &=  ~(1<<25);
	if (!(PINSEL1 & (3 << 24)) &&  !((PINMODE1 & ( 3 << 24))-( 2 << 24)) && !(FIO0DIR &(1UL<< 28))) PORT0  &=  ~(1<<28);
	\\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_JST_U--;
 	\\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_JST_L = 0;
 	\\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_JST_R = 0;
 	\\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_JST_D = 0;
  }
  if (!(PINSEL1 & (3 << 22)) &&  !((PINMODE1 & ( 3 << 22))-( 2 << 22)) && !(FIO0DIR &(1UL<< 27))) //JST_Down
  {
	PORT0 &=  ~ (1<<27);
  }
	return (0);
}

FUNC int JST_Down () 
{
  //if (!(PINSEL1 & (3 << 22)) &&  !((PINMODE1 & ( 3 << 22))-( 2 << 22)) && !(FIO0DIR &(1UL<< 27))) //JST_Down
	if (!(PINSEL1 & (3 << 22)) && !(FIO0DIR &(1UL<< 27))) //JST_Down
  {
	PORT0 |= (1<<27);
  }
   \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_JST_D++;
  if (\\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_JST_D ==2)
  {
    if (!(PINSEL1 & (3 << 18)) &&  !((PINMODE1 & ( 3 << 18))-( 2 << 18)) && !(FIO0DIR &(1UL<< 25))) PORT0  &=  ~(1<<25);
	if (!(PINSEL1 & (3 << 24)) &&  !((PINMODE1 & ( 3 << 24))-( 2 << 24)) && !(FIO0DIR &(1UL<< 28))) PORT0  &=  ~(1<<28);
	\\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_JST_D--;
 	\\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_JST_L = 0;
 	\\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_JST_R = 0;
 	\\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_JST_U = 0;
  }
  if (!(PINSEL1 & (3 << 10)) &&  !((PINMODE1 & ( 3 << 10))-( 2 << 10)) && !(FIO0DIR &(1UL<< 21))) //JST_Up
  {
	PORT0 &=  ~ (1<<21);
  }
	return (0);
}

FUNC int JST_Center () 
{
  if (!(PINSEL0 & (3 << 6)) &&  !((PINMODE0 & ( 3 << 6))-( 2 << 6)) && !(FIO0DIR &(1UL<< 3))) //JST_Center
  {
	PORT0 |= (1<<3);
  }
	return (0);
}

FUNC int JST_Release () 
{
    PORT0  &=  ~(1<<3);
	PORT0  &=  ~(1<<21);
    PORT0  &=  ~(1<<25);
	PORT0  &=  ~(1<<27);
	PORT0  &=  ~(1<<28);
   \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_JST_L = 0;
   \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_JST_R = 0;
   \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_JST_U = 0;
   \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_JST_D = 0;
   return (0);
}


FUNC int S0_0_1 () 
{
  if (!(PINSEL3 & (3 << 4)) &&  !((PINMODE3 & ( 3 << 4))-( 2 << 4)) && !(FIO1DIR &(1UL<< 18))) //Switch0
  {
    if(\\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_S0 == 0)
	{
	  Port1 |= (1UL<<18);
	  \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_S0 = 1;
 	}
    else
    {
	  Port1 &=~(1UL<<18);
	  \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_S0 = 0;
    }
  }
  return (0);
}


FUNC int S1_0_1 () 
{
  if (!(PINSEL3 & (3 << 6)) &&  !((PINMODE3 & ( 3 << 6))-( 2 << 6)) && !(FIO1DIR &(1UL<< 19))) //Switch S1
  {
    if(\\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_S1 == 0)
	{
	  Port1 |= (1UL<<19);
	  \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_S1 = 1;
 	}
    else
    {
 	  Port1 &=~(1UL<<19);
	  \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_S1 = 0;
    }
  }
	return (0);
}


FUNC int S2_0_1 () 
{
  if (!(PINSEL3 & (3 << 8)) &&  !((PINMODE3 & ( 3 << 8))-( 2 << 8)) && !(FIO1DIR &(1UL<< 20))) //Switch S2
  {
    if(\\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_S2 == 0)
	{
	  Port1 |= (1UL<<20);
	  \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_S2 = 1;
 	}
    else
    {
	  Port1 &=~(1UL<<20);
	  \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_S2 = 0;
    }
  }
  return (0);
}


FUNC int S3_0_1 () 
{
  if (!(PINSEL3 & (3 << 10)) &&  !((PINMODE3 & ( 3 << 10))-( 2 << 10)) && !(FIO1DIR &(1UL<< 21))) //Switch S3
  {
    if(\\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_S3 == 0)
	{
	  Port1 |= (1UL<<21);
	  \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_S3 = 1;
 	}
    else
    {
	  Port1 &=~(1UL<<21);
	  \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_S3 = 0;
    }
  }
	return (0);
}


FUNC int S4_0_1 () 
{
  if (!(PINSEL3 & (3 << 12)) &&  !((PINMODE3 & ( 3 << 12))-( 2 << 12)) && !(FIO1DIR &(1UL<< 22))) //Switch S4
  {
    if(\\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_S4 == 0)
	{
	  Port1 |= (1UL<<22);
	  \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_S4 = 1;
 	}
    else
    {
 	  Port1 &=~(1UL<<22);
	  \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_S4 = 0;
    }
  }
  return (0);
}


FUNC int S5_0_1 () 
{
  if (!(PINSEL3 & (3 << 14)) &&  !((PINMODE3 & ( 3 << 14))-( 2 << 14)) && !(FIO1DIR &(1UL<< 23))) //Switch S5
  {
    if(\\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_S5 == 0)
	{
	  Port1 |= (1UL<<23);
	  \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_S5 = 1;
 	}
    else
    {
	  Port1 &=~(1UL<<23);
	  \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_S5 = 0;
    }
  }
  return (0);
}

FUNC int S6_0_1 () 
{
   if (!(PINSEL3 & (3 << 16)) &&  !((PINMODE3 & ( 3 << 16))-( 2 << 16)) && !(FIO1DIR &(1UL<< 24))) //Switch S6
  {
    if(\\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_S6 == 0)
	{
	  Port1 |= (1UL<<24);
	  \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_S6 = 1;
 	}
    else
    {
	  Port1 &=~(1UL<<24);
	  \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_S6 = 0;
    }
  }
  return (0);
}


FUNC int S7_0_1 () 
{
  if (!(PINSEL3 & (3 << 18)) &&  !((PINMODE3 & ( 3 << 18))-( 2 << 18)) && !(FIO1DIR &(1UL<< 25))) //Switch S7
  {
    if(\\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_S7 == 0)
    {
	  Port1 |= (1UL<<25);
	  \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_S7 = 1;
    }
    else
    {
	  Port1 &=~(1UL<<25);
	  \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_S7 = 0;
    }
  }
  return (0);
}


FUNC int TA10_P_R () 
{
  if ((!(PINSEL3 & (3 << 20)) || (!((PINSEL3 & ( 3 << 20))-( 3 << 20))) ) &&  !((PINMODE3 & ( 3 << 20))-( 2 << 20)) && !(FIO1DIR &(1UL<< 26))) //TA10
  {
    if(\\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_TA10 == 0)
    {
	  Port1 |= (1UL<<26);
 	  \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_TA10 = 1;
    }
    else
    {
	  Port1 &=~(1UL<<26);
	  \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_TA10 = 0;
    }
  }
  return (0);
}


FUNC int TA11_P_R () 
{
  if ((!(PINSEL3 & (3 << 22)) || (!((PINSEL3 & ( 3 << 22))-( 3 << 22))) ) &&  !((PINMODE3 & ( 3 << 22))-( 2 << 22)) && !(FIO1DIR &(1UL<< 27))) //TA11
  {
    if(\\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_TA11 == 0)
    {
	  Port1 |= (1UL<<27);
 	  \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_TA11 = 1;
	  printf("TA11 on\n");
    }
    else
    {
	  Port1 &=~(1UL<<27);
	  \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_TA11 = 0;
	}
  }
  return (0);
}


FUNC int B_TA12 (void)
{
  PORT2 &= ~(1<<11);
  PORT2 |= (1<<11);
  return(1);
}



FUNC int TA12_P_R () 
{
  unsigned short int iz1,iz2;
//  if ((!(PINSEL4 & (3 << 22)) || (!((PINSEL4 & ( 3 << 22))-( 1 << 22))) ) &&  !((PINMODE4 & ( 3 << 22))-( 2 << 22)) && !(FIO2DIR &(1UL<< 11))) //TA12
  {
    if(\\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_TA12 == 0)
    {
	  // if(!((PINSEL4 & ( 3 << 22))-( 1 << 22)))
	  PORT2 |= (1<<11);
	  \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_TA12 = 1;
    }
    else
    {
	  PORT2 &= ~(1<<11);
	  \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_TA12 = 0;
	}
  }
  return (0);
}


FUNC int M_TA_1_P_R () 
{
  if(\\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_TA1 == 0)
  {
    \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_TA1 = 1;
  }
  else
  {
    \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_TA1 = 0;
	PORT0 &= ~(1UL << 4);
  }
 // \\versuch_2\test_2.c\main\key_value = 1;
  return (0);
}

FUNC int M_TA_2_P_R () 
{
  if(\\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_TA2 == 0)
  {
    \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_TA2 = 1;
  }
  else
  {
    \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_TA2 = 0;
	PORT0 &= ~(1UL << 5);
  }
  return (0);
}

FUNC int M_TA_3_P_R () 
{
  if(\\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_TA3 == 0)
  {
    \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_TA3 = 1;
  }
  else
  {
    \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_TA3 = 0;
	PORT3 &= ~(1UL << 26);
  }
  return (0);
}

FUNC int M_TA_4_P_R () 
{
  if(\\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_TA4 == 0)
  {
    \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_TA4 = 1;
  }
  else
  {
    \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_TA4 = 0;
	PORT0 &= ~(1UL << 4);
  }
  return (0);
}

FUNC int M_TA_5_P_R () 
{
  if(\\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_TA5 == 0)
  {
    \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_TA5 = 1;
  }
  else
  {
    \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_TA5 = 0;
	PORT0 &= ~(1UL << 5);
  }
  return (0);
}

FUNC int M_TA_6_P_R () 
{
  if(\\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_TA6 == 0)
  {
    \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_TA6 = 1;
  }
  else
  {
    \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_TA6 = 0;
	PORT3 &= ~(1UL << 26);
  }
  return (0);
}

FUNC int M_TA_7_P_R () 
{
  if(\\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_TA7 == 0)
  {
    \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_TA7 = 1;
  }
  else
  {
    \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_TA7 = 0;
	PORT0 &= ~(1UL << 4);
  }
  return (0);
}

FUNC int M_TA_8_P_R () 
{
  if(\\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_TA8 == 0)
  {
    \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_TA8 = 1;
  }
  else
  {
    \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_TA8 = 0;
	PORT0 &= ~(1UL << 5);
  }
  return (0);
}

FUNC int M_TA_9_P_R () 
{
  if(\\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_TA9 == 0)
  {
    \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_TA9 = 1;
  }
  else
  {
    \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_TA9 = 0;
	PORT3 &= ~(1UL << 26);
  }
  return (0);
}

SIGNAL void Sim_MKey(void)
{
  while(1)
  {
	//swatch (0.100);  /* Delay 0.1 seconds */
	twatch(10);
	//printf("Port2.3=%d,M1= %d\n",(PORT2 & (1UL<< 3 )),\\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_TA1);

    if ((PORT2 & (1UL<< 3 ))> 0 && \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_TA1==1 ){PORT0 |= (1UL << 4);} //M1
    if ((PORT2 & (1UL<< 3 ))> 0 && \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_TA2==1 ){PORT0 |= (1UL << 5);} //M2
    if ((PORT2 & (1UL<< 3 ))> 0 && \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_TA3==1 ){PORT3 |=(1UL << 26);} //M3
    if ((PORT2 & (1UL<< 4 ))> 0 && \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_TA4==1 ){PORT0 |= (1UL << 4);} //M4
    if ((PORT2 & (1UL<< 4 ))> 0 && \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_TA5==1 ){PORT0 |= (1UL << 5);} //M5
    if ((PORT2 & (1UL<< 4 ))> 0 && \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_TA6==1 ){PORT3 |=(1UL << 26);} //M6
    if ((PORT2 & (1UL<< 5 ))> 0 && \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_TA7==1 ){PORT0 |= (1UL << 4);} //M7
    if ((PORT2 & (1UL<< 5 ))> 0 && \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_TA8==1 ){PORT0 |= (1UL << 5);} //M8
    if ((PORT2 & (1UL<< 5 ))> 0 && \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_TA9==1 ){PORT3 |=(1UL << 26);} //M9
  }
  return;
}

SIGNAL void Sim_Enc_L (unsigned int i1, unsigned long int icycles)
{
  unsigned int i2;
  unsigned long int i3;
  i2=0;i3=icycles/4;
  if ((!(PINSEL1 & (3 << 14)) || (!((PINSEL1 & ( 3 << 14))-( 3 << 14))) || (!((PINSEL1 & ( 3 << 16))-( 3 << 16)))) &&  !((PINMODE1 & ( 3 << 14))-( 2 << 14)) && !(FIO0DIR &(1UL<< 23))) //Encoder A
  {
	while (i2 < i1)
	{ 
	  i2++;
	  PORT0 |= (1<<23);
	  twatch (i3);
	  PORT0 |= (1<<24);
	  twatch (i3);
	  PORT0 &= ~(1<<23);
	  twatch (i3);
	  PORT0 &= ~(1<<24);
	  twatch (i3);
	}
  }
  return;
}

SIGNAL void Sim_Enc_R (unsigned int i1, unsigned long int icycles)
{
  unsigned int i2;
  unsigned long int i3;
  i2=0;i3=icycles/4;
  if ((!(PINSEL1 & (3 << 16)) || (!((PINSEL1 & ( 3 << 16))-( 3 << 16))) || (!((PINSEL1 & ( 3 << 14))-( 3 << 14))) ) &&  !((PINMODE1 & ( 3 << 16))-( 2 << 16)) && !(FIO0DIR &(1UL<< 24))) //Encoder B
  {
	while (i2 < i1)
	{ 
	  i2++;
	  PORT0 |= (1<<24);
	  twatch (i3);
	  PORT0 |= (1<<23);
	  twatch (i3);
	  PORT0 &= ~(1<<24);
	  twatch (i3);
	  PORT0 &= ~(1<<23);
	  twatch (i3);
	  //printf("Enc_B\n");
	}
  }
  return;
}


FUNC int Enc_A ()
{
  if ((!(PINSEL1 & (3 << 14)) || (!((PINSEL1 & ( 3 << 14))-( 3 << 14)))  ) &&  !((PINMODE1 & ( 3 << 14))-( 2 << 14)) && !(FIO0DIR &(1UL<< 23))) //Encoder A
  {
	//PORT0 &= ~(1<<23);
    //PORT0 |= (1<<23);   
 	Sim_Enc_L (1, 10000);
	//printf("Enc_A\n");
  }
	//printf("Enc_A2\n");
  return (0);
}

FUNC int Enc_B ()
{
  if ((!(PINSEL1 & (3 << 16)) || (!((PINSEL1 & ( 3 << 16))-( 3 << 16)))  ) &&  !((PINMODE1 & ( 3 << 16))-( 2 << 16)) && !(FIO0DIR &(1UL<< 24))) //Encoder B
  {
	//PORT0 &= ~(1<<24);
    //PORT0 |= (1<<24);   
 	//PORT0 &= ~(1<<24);
	Sim_Enc_R (1, 10000);
 }
  return (0);
}

FUNC int Enc_P_R ()
{
  if ((!(PINSEL4 & (3 << 20)) || (!((PINSEL4 & ( 3 << 20))-( 1 << 20))) ) &&  !((PINMODE4 & ( 3 << 20))-( 2 << 20)) && !(FIO2DIR &(1UL<< 10))) //Encoder Button
  {
    if(\\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_Enc == 0)
    {
	  //FIO2MASK&=~(1UL<<11);
 	  \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_Enc = 1;
	  if(!((PINSEL4 & ( 3 << 20))-( 1 << 20)))
	  {
	    PORT2 &= ~(1<<10);
		PORT2 |= (1<<10);
	  }
    }
    else
    {
 	  //FIO2MASK|=(1UL<<11);
	  \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_Enc = 0;
	}
  }
  return (0);
}



SIGNAL void Sim_TA12B (long int i1)
{
	  \\test\../Peripherals/Source Files/GLCD_Simulation.c\iS_TA12 = 1;
	  PORT2 |= (1<<11);
	  twatch (i1);
	  PORT2 &= ~(1<<11);
	  twatch (i1);
	  PORT2 |= (1<<11);
	  twatch (i1);
	  PORT2 &= ~(1<<11);
	  twatch (i1);
	  PORT2 |= (1<<11);
	  return;
}

FUNC void Sim_S_POT1_V (float value)
{
	if (value >3.3) value=3.3;
	if (value <0) value=0;
	AIN4=value;
	return;
}

FUNC void Sim_S_POT2_V (float value)
{
	if (value >3.3) value=3.3;
	if (value <0) value=0;
	AIN5=value;
	return;
}
FUNC void Sim_S_LM35_V (float value)
{
	if (value >3.3) value=3.3;
	if (value <0) value=0;
	AIN3=value;
	return;
}


SIGNAL void Sim_DigTemp_C (unsigned int i1, float Temp, unsigned int ifactor)
{
  unsigned int i2;
  unsigned long int i3;
  i2=0;i3=(unsigned long int)((Temp + 273.15)* ifactor*100.)/2;
  //i3=100000000/2;
  if ((!(PINSEL3 & (3 << 26)) ||  (!(PINSEL3 |= (2 << 26))) ) && !(FIO1DIR &(1UL<< 29))) //PORT 1.29
  {
	while (i2 < i1)
	{ 
	  i2++;
	  PORT1 |= (1<<29);
	  twatch (i3);
	  PORT1 &= ~(1<<29);
	  twatch (i3);
	  //printf("digTemp\n");
	}
  }
  return;
}

SIGNAL void Pmess (unsigned int i1, unsigned long int iperiod, unsigned long int ifactor) {
  unsigned int i2; unsigned long int i3,i4;
  if ((!(((PINSEL3>>20)&3)^3) ) && !(FIO1DIR>>26 &1)) //PORT 1.26 is input and GPIO or CAP0.0
  {
    if ((!(((PINSEL3>>22)&3)^3) ) && !(FIO1DIR>>27 &1)) //PORT 1.27 is input and GPIO or CAP0.1
	{
  i2=0; i3=ifactor; i4=iperiod-i3;
	  while (i2 < i1) { i2++; 
			PORT1 |= (1<<26); PORT1 |= (1<<27); twatch (i3); 
			PORT1 &= ~(1<<26); PORT1 &= ~(1<<27); twatch (i4);
	  }}} return; }

SIGNAL void Sim_PulseM (unsigned int i1, unsigned long int iperiod, unsigned long int ifactor)
{
  unsigned int i2;
  unsigned long int i3,i4;
  i2=0;
  i3=ifactor; i4=iperiod-i3;
  if ((!(PINSEL3 & (3 << 26)) ||  (!(PINSEL3 |= (2 << 26))) ) && !(FIO1DIR &(1UL<< 29))) //PORT 1.29
  {
    if ((!(PINSEL3 & (3 << 24)) ||  (!(PINSEL3 |= (2 << 24))) ) && !(FIO1DIR &(1UL<< 28))) //PORT 1.28
	{
	  while (i2 < i1)
	  { 
	    i2++;
	    PORT1 |= (1<<28);
	    PORT1 |= (1<<29);
	    twatch (i3);
	    PORT1 &= ~(1<<28);
	    PORT1 &= ~(1<<29);
	    twatch (i4);
	    //printf("digTemp\n");
	  }
	}
  }
  return;
}


SIGNAL void Sim_PWM (unsigned short iPort, unsigned short iPin, unsigned int i1, unsigned long int iperiod, unsigned long int ifactor)
{
  unsigned int i2;
  unsigned long int i3,i4;
  if (iPin > 31) return;
  if (ifactor > iperiod) return;
  i2=0;
  i3=ifactor; i4=iperiod-i3;
  // constant values 0 or 1
  if (ifactor == 0 || ifactor == iperiod)
  {
	switch (iPort)
	{
	  case 0:
        if (ifactor==0) PORT0 &= ~(1<<iPin);
	    else PORT0 |= (1<<iPin);
	  break;
	  case 1:
        if (ifactor==0) PORT1 &= ~(1<<iPin);
	    else PORT1 |= (1<<iPin);;
	  //printf("PWM Port1 %d\n",ifactor);
	  break;
	  case 2:
        if (ifactor==0) PORT2 &= ~(1<<iPin);
	    else PORT2 |= (1<<iPin);;
	  break;
	  case 3:
        if (ifactor==0) PORT3 &= ~(1<<iPin);
	    else PORT3 |= (1<<iPin);;
	  break;
	  case 4:
        if (ifactor==0) PORT4 &= ~(1<<iPin);
	    else PORT4 |= (1<<iPin);
	  break;
	  default: ;
	}
	return;
  }
  // PWM signal
  while (i2 < i1)
  { 
	  i2++;
	switch (iPort)
	{
	  case 0:
	    PORT0 |= (1<<iPin);
	  break;
	  case 1:
	    PORT1 |= (1<<iPin);
	  break;
	  case 2:
	    PORT2 |= (1<<iPin);
	  break;
	  case 3:
	    PORT3 |= (1<<iPin);
	  break;
	  case 4:
 	    PORT4 |= (1<<iPin);
	  break;
	  default:;
	}
	twatch (i3);
	switch (iPort)
	{
	  case 0:
        PORT0 &= ~(1<<iPin);
	  break;
	  case 1:
        PORT1 &= ~(1<<iPin);
	  break;
	  case 2:
        PORT2 &= ~(1<<iPin);
	  break;
	  case 3:
        PORT3 &= ~(1<<iPin);
	  break;
	  case 4:
        PORT4 &= ~(1<<iPin);
	  break;
	  default: ;
	}
	twatch (i4);
	  //printf("PWM\n");
  }
  return;
}

SIGNAL void Sim_7Seg (void)
{
  unsigned short int i7Seg_o;
  i7Seg_o=\\test\../Peripherals/Source Files/GLCD_Simulation.c\i7Seg ;
 // SSP0_IN=i7Seg_o;
  SSP0_OUT=i7Seg_o;
  while (1)
  { 
    twatch(5);
//	printf("Fiopin=%d\n",(PORT0 >> 16 & (1UL<< 0)));
    if(!(PORT0 >> 16 & (1UL<< 0)))
	{
//	  printf("SSP0_OUT=%d,i7Seg_o=%d\n",SSP0_OUT,i7Seg_o);
//	  while (SSP0_OUT == i7Seg_o){twatch(10);printf("SSP0_OUT=%d,i7Seg_o=%d\n",SSP0_OUT,i7Seg_o);}
	  while (SSP0_OUT == i7Seg_o){twatch(10);}
	  i7Seg_o=SSP0_OUT;
//	  SSP0_IN=i7Seg_o;
//	  while ( !(PORT0 >> 16 & (1UL<< 0))){twatch(10);printf("Fiopin=%d\n",(PORT0 >> 16 & (1UL<< 0)));}
	  while ( !(PORT0 >> 16 & (1UL<< 0))){twatch(10);}
	  \\test\../Peripherals/Source Files/GLCD_Simulation.c\i7Seg = i7Seg_o;
//	  printf("i7Seg=%d\n",\\test\../Peripherals/Source Files/GLCD_Simulation.c\i7Seg);
	}
  }
  return;
}



//Sim_DigTemp_C (10, 39.35, 640);
//Sim_PWM (1, 29, 100, 100000, 50000);
//Sim_PulseM (100, 1000000, 500000);
//Sim_MKey();
//Sim_7Seg ();